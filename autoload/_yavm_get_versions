#!/usr/bin/env zsh

typeset -gA _yavm_versions=()
typeset -gA _yavm_command_files=()

[[ -z "$YAVM_GO_ENABLED" ]] && _yavm_versions[go]="__disabled__"
[[ -z "$YAVM_PYTHON_ENABLED" ]] && _yavm_versions[python]="__disabled__"

# _yavm_debug "Searching for versions starting from '${(D)PWD}'."

# First priority is environment variables. Something set as an environment
# variable is higher priority than a file.
if [[ -z "${_yavm_versions[python]}" &&  -n "$PYENV_VERSION" ]]; then
  _yavm_versions[python]="$PYENV_VERSION"
fi

# Look for version files in every directory going upwards. Version specific
# stuff should go first. That is, '.python-version' should be checked before
# '.tool-versions'. Always check if a version is already set before checking
# it. If it is, a version was set with a higher priority, so don't overwrite
# it.
local file_directory="$PWD"
while true; do
  if [[ -z "${_yavm_versions[python]}" && -f "$file_directory/.python-version" ]]; then
    _yavm_versions[python]="${(j: :)${(f)$(<$file_directory/.python-version)}}"
  fi

  if [[ -f "$file_directory/.tool-versions" ]]; then
    for line in ${(f)$(<$file_directory/.tool-versions)}; do
      local split_line=("${(s: :)line}")
      local versions="${split_line[2,-1]}"
      if [[ -z "${_yavm_versions[python]}" && "${split_line[1]}" = "python" ]]; then
        _yavm_versions[python]="$versions"
      elif [[ -z "${_yavm_versions[go]}" && "${split_line[1]}" = "golang" ]]; then
        _yavm_versions[go]="$versions"
      fi
    done
  fi

  if [[ "$file_directory" = "/" ]]; then
    break
  fi

  file_directory="${file_directory:a:h}"
done


# Finally, we set global versions if it wasn't set elsewhere. Only set global
# versions if they are actually set in a global file somewhere. We also don't
# need to set global versions explicitly if the file uses the normal search
# name and would have been already found. For example, the asdf global version
# file is named the same and is in the user's home directory.
if [[ -z "${_yavm_versions[python]}" && -f "$PYENV_ROOT/version" ]]; then
  _yavm_versions[python]="${(j: :)${(f)$(<$PYENV_ROOT/version)}}"
fi
